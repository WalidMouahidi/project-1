"""
Interactive Streamlit dashboard for exploring Netflix revenue and subscriber data.

This app reads the SQLite database generated by the ETL pipeline and allows
the user to interactively explore revenue, membership and ARPU trends by
region.  It also displays the forecast for global revenue generated by the
ARIMA model.

To run the app locally:

    streamlit run app/streamlit_app.py

Make sure to install the required packages listed in requirements.txt.
"""
import pandas as pd
import streamlit as st
from pathlib import Path
import sqlite3
import plotly.express as px


@st.cache_data
def load_data(db_path: Path) -> pd.DataFrame:
    """Load and merge data from the SQLite database into a DataFrame.

    Uses the built‑in sqlite3 module to avoid SQLAlchemy.
    """
    conn = sqlite3.connect(str(db_path))
    try:
        dim_date = pd.read_sql_query("SELECT * FROM dim_date", conn)
        dim_region = pd.read_sql_query("SELECT * FROM dim_region", conn)
        fact = pd.read_sql_query("SELECT * FROM fact_revenue_subscribers", conn)
    finally:
        conn.close()
    df = fact.merge(dim_date, on="date_id", how="left").merge(dim_region, on="region_id", how="left")
    df["period"] = pd.PeriodIndex(year=df["year"], quarter=df["quarter"], freq="Q").to_timestamp(how="end")
    return df


def main():
    st.set_page_config(page_title="Netflix Revenue Dashboard", layout="wide")
    st.title("Netflix Revenue & Subscribers Dashboard")
    base_dir = Path(__file__).resolve().parent.parent
    db_path = base_dir / "data" / "netflix.db"
    df = load_data(db_path)
    regions = df["region"].unique().tolist()
    metrics = {"Revenue": "revenue", "Members": "members", "ARPU": "arpu"}

    # Sidebar controls
    st.sidebar.header("Filters")
    selected_region = st.sidebar.selectbox("Select Region", regions)
    selected_metric = st.sidebar.selectbox("Select Metric", list(metrics.keys()))

    # Filter dataframe
    filtered_df = df[df["region"] == selected_region]
    metric_column = metrics[selected_metric]

    # Plot using Plotly Express
    fig = px.line(
        filtered_df,
        x="period",
        y=metric_column,
        title=f"{selected_metric} Over Time – {selected_region}",
        markers=True,
        labels={"period": "Quarter", metric_column: selected_metric},
    )
    st.plotly_chart(fig, use_container_width=True)

    # Display forecast if global revenue
    st.markdown("---")
    st.header("Global Revenue Forecast")
    forecast_img_path = base_dir / "outputs" / "global_revenue_forecast.png"
    if forecast_img_path.exists():
        st.image(str(forecast_img_path), caption="Forecast of Global Streaming Revenue (Next 4 Quarters)")
    else:
        st.write("Run the analysis script to generate a forecast.")


if __name__ == "__main__":
    main()